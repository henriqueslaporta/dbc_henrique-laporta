entity Region {
	regionName String required min(10)
}

entity Country {
	countryName String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String,
	postalCode String,
	city String,
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author Tiago Rosa.
 */
entity Task {
	title String,
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String,
	lastName String,
	email String,
	phoneNumber String,
	hireDate Instant,
	salary Long,
	commissionPct Long
}

entity Job {
	jobTitle String,
	minSalary Long,
	maxSalary Long
}

entity JobHistory {
	startDate Instant,
	endDate Instant,
	language Language
}

enum Language {
    FRENCH, ENGLISH, SPANISH
}

relationship OneToOne {
	Country{region(regionName)} to Region
}

relationship OneToOne {
	Location{country(countryName)} to Country
}

relationship OneToOne {
	Department{location(streetAddress)} to Location
}

relationship ManyToMany {
	Job{task(title)} to Task{job(jobTitle)}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee{job(jobTitle)} to Job,
	/**
	* A relationship
	*/
	Department{employee(firstName)} to
	/**
	* Another side of the same relationship
	*/
	Employee
}

relationship ManyToOne {
	Employee{manager(firstName)} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job(jobTitle)} to Job,
	JobHistory{department(departmentName)} to Department,
	JobHistory{employee(firstName)} to Employee
}

// Set pagination options
paginate all with pagination

// Use Data Transfert Objects (DTO)
dto all with mapstruct

// Set service options
service all with serviceImpl

// Set search options
search all with elasticsearch


